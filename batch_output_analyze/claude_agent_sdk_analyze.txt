Looking at this Elixir SDK module:\n\n## What it does\nProvides a programmatic Elixir interface to Claude Code, allowing developers to send queries and receive streaming responses without manual CLI interaction.\n\n## Key functions\n- **`query/2`** - Main entry point that sends a query and returns a stream of messages (supports both simple strings and resuming conversations)\n- **`query_raw/2`** - Lower-level function returning raw process output instead of parsed messages\n- **Delegation to `ClaudeAgentSDK.Query`** - Both functions delegate to the `Query` module for actual implementation\n\n## One improvement suggestion\n**Add timeout configuration**: The module lacks explicit timeout controls. Long-running queries could hang indefinitely. Consider adding a `:timeout` option to `Options` (e.g., in `lib/claude_agent_sdk/options.ex:15-20`) to let users specify maximum execution time and gracefully handle timeouts.
Looking at this Elixir SDK module:\n\n## What it does\nProvides a programmatic Elixir interface to Claude Code, allowing developers to send queries and receive streaming responses without manual CLI interaction.\n\n## Key functions\n- **`query/2`** - Main entry point that sends a query and returns a stream of messages (supports both simple strings and resuming conversations)\n- **`query_raw/2`** - Lower-level function returning raw process output instead of parsed messages\n- **Delegation to `ClaudeAgentSDK.Query`** - Both functions delegate to the `Query` module for actual implementation\n\n## One improvement suggestion\n**Add timeout configuration**: The module lacks explicit timeout controls. Long-running queries could hang indefinitely. Consider adding a `:timeout` option to `Options` (e.g., in `lib/claude_agent_sdk/options.ex:15-20`) to let users specify maximum execution time and gracefully handle timeouts.